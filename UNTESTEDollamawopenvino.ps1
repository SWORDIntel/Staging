<#
.SYNOPSIS
    One-shot installer for Ollama + ipex-llm + OpenVINO on Windows 11

.DESCRIPTION
    * Downloads Miniforge (Conda), creates an isolated env
    * Installs the correct ipex-llm wheel   (CPU  = [cpp],  GPU/NPU = [xpu])
    * Calls init-ollama to build an OpenVINO-enabled ollama.exe
    * Generates Start-Ollama.bat and (optionally) a Windows service via NSSM
    * Logs everything to $HOME\ollama-setup.log

.NOTES
    Author : ChatGPT (OpenAI o3)
    Date   : 2025-04-30
#>

#region --- Settings ----------------------------------------------------------

$EnvName          = "llm-cpp"                       # Conda env
$MiniforgeURL     = "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Windows-x86_64.exe"
$MiniforgeEXE     = "$env:TEMP\Miniforge3.exe"
$BaseFolder       = "$HOME\ollama-openvino"         # All artefacts live here
$LogFile          = "$HOME\ollama-setup.log"
$StartBatPath     = "$BaseFolder\Start-Ollama.bat"
$NSSMZipURL       = "https://nssm.cc/release/nssm-2.24.zip"
$ServiceName      = "Ollama-OpenVINO"

#endregion --------------------------------------------------------------------

#region --- Helper Functions --------------------------------------------------

function Log ($Msg) {
    $Stamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
    "$Stamp  $Msg" | Tee-Object -FilePath $LogFile -Append
}
function Fail ($Msg) { Log "ERROR: $Msg"; throw $Msg }

function Step ($Index, $Total, $Msg) {
    Write-Progress -Activity "Ollama + OpenVINO setup" -Status $Msg -PercentComplete (100*$Index/$Total)
    Log $Msg
}

function Test-GPU {
    # Return $true if an Intel GPU/NPU present and driver version ≥ 31.0.101.5122
    $intelVideo = Get-CimInstance Win32_VideoController | Where-Object { $_.Name -match "Intel" }
    if (-not $intelVideo) { return $false }
    $driver = [version]$intelVideo.DriverVersion
    return ($driver -ge [version]"31.0.101.5122")
}

#endregion --------------------------------------------------------------------

try {
    $TotalSteps = 8
    New-Item -ItemType Directory -Path $BaseFolder -Force | Out-Null
    Log "=== Ollama + OpenVINO setup started ==="

    #------------------------------------------------------------------ 1/8
    Step 1 $TotalSteps "Checking admin rights"
    if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        Fail "Please re-run this script in an **elevated** PowerShell."
    }

    #------------------------------------------------------------------ 2/8
    Step 2 $TotalSteps "Ensuring Miniforge3 is installed"
    $CondaRoot = "$HOME\miniforge3"
    if (-not (Test-Path "$CondaRoot\condabin\conda.bat")) {
        Invoke-WebRequest $MiniforgeURL -OutFile $MiniforgeEXE -UseBasicParsing
        & $MiniforgeEXE /InstallationType=JustMe /AddToPath=0 /RegisterPython=0 /S | Out-Null
        Log "Miniforge installed to $CondaRoot"
    } else {
        Log "Miniforge already present → skipping"
    }

    #------------------------------------------------------------------ 3/8
    Step 3 $TotalSteps "Creating / activating Conda environment $EnvName"
    $CondaBat = "$CondaRoot\condabin\conda.bat"
    cmd /c `"$CondaBat create -n $EnvName -y python=3.11`" | Out-Null
    # Use 'conda run' for non-interactive commands
    $CondaRun = "cmd /c `"$CondaBat run -n $EnvName`""

    #------------------------------------------------------------------ 4/8
    Step 4 $TotalSteps "Installing ipex-llm (auto-detect HW)"
    $UseGPU = Test-GPU
    $Extra  = $UseGPU ? "xpu" : "cpp"
    & $CondaBat run -n $EnvName python - <<PY | Out-Null
import subprocess, sys, os, json, pathlib, textwrap
wheel = f"ipex-llm[{ '"' + "$Extra" + '"' }]"
subprocess.check_call([sys.executable, "-m", "pip", "install", "--pre", "--upgrade", wheel])
PY
    Log "ipex-llm[$Extra] installed"

    #------------------------------------------------------------------ 5/8
    Step 5 $TotalSteps "Initialising OpenVINO-enabled Ollama binary"
    $InitCmd = "`"$CondaBat run -n $EnvName init-ollama.bat`""
    cmd /c $InitCmd | Out-Null
    Copy-Item "$HOME\init-ollama\ollama.exe" $BaseFolder -Force
    Log "ollama.exe copied to $BaseFolder"

    #------------------------------------------------------------------ 6/8
    Step 6 $TotalSteps "Generating Start-Ollama.bat"
    @"
@echo off
REM  Generated by install-ollama-openvino.ps1  (re-run to regenerate)
call "%CondaRoot%\condabin\conda.bat" activate $EnvName

REM --- Choose device -------------------------------------------------
set OLLAMA_NUM_GPU=$([bool]$UseGPU -as [int])99

REM --- Recommended tuning --------------------------------------------
set SYCL_CACHE_PERSISTENT=1
set ZES_ENABLE_SYSMAN=1
set OLLAMA_KEEP_ALIVE=-1

REM --- Launch ---------------------------------------------------------
"%BaseFolder%\ollama.exe" serve
"@ | Set-Content $StartBatPath -Encoding ASCII
    Log "Launcher created at $StartBatPath"

    #------------------------------------------------------------------ 7/8
    Step 7 $TotalSteps "Downloading NSSM (optional Windows service)"
    $NSSMZip = "$env:TEMP\nssm.zip"
    Invoke-WebRequest $NSSMZipURL -OutFile $NSSMZip -UseBasicParsing
    Expand-Archive $NSSMZip -DestinationPath $BaseFolder -Force
    $NSSMExe = Get-ChildItem $BaseFolder -Filter nssm.exe -Recurse | Select-Object -First 1

    if ($NSSMExe) {
        Log "Installing service $ServiceName via NSSM"
        & $NSSMExe install $ServiceName "`"$CondaRoot\condabin\conda.bat`"" run -n $EnvName "`"$BaseFolder\ollama.exe`"" serve
        & $NSSMExe set    $ServiceName AppDirectory $BaseFolder
        & sc.exe start    $ServiceName | Out-Null
    } else {
        Log "NSSM not found – service will not be installed"
    }

    #------------------------------------------------------------------ 8/8
    Step 8 $TotalSteps "Final validation (conda run ollama version)"
    $Version = cmd /c "`"$CondaBat run -n $EnvName $BaseFolder\ollama.exe version`""
    Log "Ollama version → $Version"

    Write-Progress -Activity "Ollama + OpenVINO setup" -Completed -Status "Done"
    Log "=== Setup finished successfully ==="
    Write-Host "`nSUCCESS: Launch $StartBatPath or use the '$ServiceName' service to begin." -Foreground Green
}
catch {
    Write-Error $_
    Log "=== Setup failed ==="
}
